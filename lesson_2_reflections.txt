What happens when you initialize a repository? Why do you need to do it?

You can initialize a repository using 'git init' in the directory where you
want to create the repository. This creates a hidden .git file that is used
to keep track of the repository (records changes, commits, etc.), and you
need to initialize this repository in order to make and share your files
with others, and also to implement Git as version control for your software.
The repository starts out with 0 commits, and you can run 'git status' to see
how there have been no commits made yet, and to see what files are 'untracked'
in your repository.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area temporarily stores files that will be included in a commit,
while the working directory shows where the files are located and usually
does not change. Similarly, these commits using the files in the staging area
are what actually change the information and files in the repository, so
it seems like a good idea to have a step where you can review all files to
be changed and double-check that you really want to make these changes!
Otherwise, it would be easy to just randomly commit files if you typed in
a command wrong, there would be too many commits that have not been thought
through because there is no checking or review step (which would use the
staging area).

How can you use the staging area to make sure you have one commit per logical
change?

You can compare the files in the staging area to the files in the working
directory and also to the files in the repository to make sure that you are
adding the files with the correct changes you want made. This reduces the
chance of accidental commits that could have errors or unwanted changes in
them. It also makes it more difficult to change the repository, since you
need to complete more than a simple "save" to update the repository, which
helps maintain the security and integrity of the repository.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches are useful if the code has new features that can be added later to
upgrade code, or for something like optimization. You can put this additional
code on different branches and work on it without it affecting the main
code branch, and keep rolling back changes as necessary if the newer code
does not work. You can run these changes parallel to the main branch,
especially if the main branch of the program needs to remain stable because
it is used to continuously run a program, website, operating system,
hardware device, etc. especially if there could be huge problems if the
software does not run consistently, even if it is not optimized or fully-
featured.

How do the diagrams help you visualize the branch structure?

The diagrams are useful for visualizing the branch structure because you can
easily see the commits where the branches start and end, and you can see
any sub-branches from those branches or merges. So you can quickly and easily
get a good understanding of the current branches, their status from their
commit messages, where/when they branched off, and which commits are
unreachable from a certain point.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging the two branches together is a single branch that shares
the same name as one of the 'parent' branches, with the commits for each
branch being available as commits ordered by timestamp on the new single
branch. We represent it on the diagram as two branches that split and merge
back together to show how a branch was split off for some purpose, like
collaboration or experimentation, and then rejoined with the branch it split
from later after the work on that branch was working/complete/acceptable, etc.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

The pros are that the software can just automatically put the files together
unless there are conflicts, which still must be resolved manually. This is
better than merging code manually, because it takes less time, especially if
there is a lot of different code in each branch that has been changed since
they split. However, you still have to manually choose which code you want in
your merged version if there are conflicting functions or variables. This
allows you to have some control over the merge process where some code is
better for the merged file than other code, and still does not take too long
because the conflicting code is highlighted by Git. Git is not sophisticated
enough to make these decisions on its own, and you can always change the code
in a later commit after merging the files if none of the options given to
resolve the conflict are satisfying.
