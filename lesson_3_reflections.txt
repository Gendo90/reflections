When would you want to use a remote repository rather than keeping all your work local?

You could use a remote repository to access your files from other computers, like if you were changing or upgrading computers and still
needed access to files. You could also access the files when travelling or from work and from home, if you want to have 24-hour access 
to files that are on a work computer. You could also use a remote repository to collaborate with others on a project, possibly never 
even meeting them in person and just seeing their updates to the code base! This would also work well with employees located in 
different offices who all work on the same project, like if you had a company that hired temporary workers, contractors, etc., or 
even was just a larger company with people with different specialties in different locations.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

There might be changes on the remote server that are not part of what you are working on at the moment, especially if 
you are working on a branch or some experimental code. You also might miss some of the files or changes to the files 
if you are always pulling automatically, because then the program might pull files and you might not notice the pull.
You could also have files turn "wrong" or contain bad code online, if someone made a mistake with a commit, so you do
not want to pull the code because you know that it will cause the program to run incorrectly (especially if you have 
a collaborator or someone who tells you that they made a mistake with a commit or push and the project is malfunctioning).

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a "clone" of a repository available on GitHub, so that your account can have a copy of another person's 
repository available on that website, but you can give them credit and make changes to this version. A clone is just 
a copy of another repository, regardless of where it is located. It is identical when the "clone" command runs, 
but changes may be made to it later. Branches are parallel lines of code to the main "branch" that diverge from the 
main branch of code and therefore share at least one commit in common with it. This code is then changed to add new
features or to experiment with the existing code and possibly improve or rewrite it, while the main branch maintains
functionality. This is all done within a single repository, and the branches can be "merged" back together once the
features or optimization or whatever the purpose of the branch has started working consistently and is stable enough
to add back to the main branch of code.

What is the benefit of having a copy of the last known state of the remote stored locally?

You can see where the state the remote is currently, at least as of the time of the last pull request.
You can also roll back changes to that state if necessary, since the shared online state of the repository should
be stable if it is open to the public or your coworkers and shared. You can also work from that last known 
remote state on your local machine, and then push changes when done - that way you would know that there 
are no conflicts unless someone else changed the repository online, so you would only need to do a fast-forward 
merge if you pushed your updated repository back online. This would be useful for a single-person project, since 
nobody else could make changes online to your own repository, so most merges would be fast-forward. You could also 
make multiple commits and then push the repository back, instead of pushing after each commit, and the functionality 
should still be the same but you would need to enter fewer commands.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

It would be more difficult on the whole to collaborate without using Git or GitHub because it would be harder to 
keep track of the changes to the project and harder to organize. You do not need to save different versions of the 
files since Git has "save" states that you can return to, and GitHub allows multiple people to view and work on 
the same project. So Git and GitHub essentially save time, space, and organize the work better. However, if everyone 
is needed to reach consensuses on acceptable code or to debate features, it becomes harder to get the project to 
run as smoothly and the work to go as fast. So there might be some performance issues to using Git or GitHub, 
especially if the work could be split into modules and then just combined later - with individual developers working
on their own modules. That would mean they only really need to discuss the code interfaces between their separate 
modules of code, and cannot directly edit each others' code, which also makes projects less confusing, if lots of
people update the same code.